//
// Created by ffugi on 14.02.19.
//

#ifndef CETRIS_TETROMINOGENERATOR_HPP
#define CETRIS_TETROMINOGENERATOR_HPP


#include <vector>
#include <map>
#include <string>
#include <iostream>
#include <stack>
#include "Structs.hpp"
#include "Tetromino.hpp"


/**
 * Class which contains possible tetrominos and can generate ones randomly
 * or by given name
 */
class TetrominoGenerator {
public:
    TetrominoGenerator() = default;

    /**
     * Returns name of tetromino which will appear next
     * @return name of next tetromino
     */
    std::string peekNextTetromino();

    /**
     * Gets random tetromino
     * Sequence of tetromions are generated by 7 - bag method
     * @return generated tetromino
     */
    Tetromino getNextTetromino();

    /**
     * Gets tetromino basing on given name
     * @param name - name of tetromino
     * @return generated tetromino
     */
    Tetromino getTetrominoByName(std::string &name) const;

    /**
     * Adds possible tetromino to base
     * @param name - name of tetromino
     * @param tetromino - given tetromino
     */
    void addTetrominoCoords(const std::string &name, const Tetromino &tetromino);

private:
    std::map<std::string, Tetromino> tetrominos;
    std::stack<std::string> currentBag;
    std::string next;

    void refillBag() {
        std::vector<std::string> names;
        for (const auto &shape : tetrominos) {
            names.push_back(shape.first);
        }
        for (unsigned i = 0; i < 7; i++) {
            unsigned long index = rand() % names.size();
            currentBag.push(names.at(index));
            names.erase(names.begin() + index);
        }
    }
};


#endif //CETRIS_TETROMINOGENERATOR_HPP
